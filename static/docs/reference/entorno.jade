include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Entorno (ENV)',url:'/pillars/docs/reference/entorno.jade'}];
	+reference-layout("Pillars.js Reference - Entorno (ENV) - 'make it easy!'",path)

		#title
			h1 ENV (Entorno)
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/lib/ENV.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				La variable `ENV` está disponible de forma global al realizar la inclusión de la librería. 

				Mediante `ENV` se **configura el entorno de la aplicación web** y es el **punto de anclaje** para el resto de los elementos que componen el framework

				El entorno de la aplicación es todo aquello que necesitamos configurar para una aplicación web como; puerto al que responderá, configuración del smtp, configuración de los idiomas de la aplicación, tamaño de archivo máximo permitido por el servidor, etc.
	
				
		//- Syntax
		section.syntax
			h2#syntax Sintaxis
			:highlight(lang='javascript')
				//Inclusión de la librería y método start() para arrancar el servidor.
				require("pillars").start();

				//Configuración del entorno
				ENV.configure({
					languages: ['es','en'],
					debug: true,
					server:{
						port: 80,
						maxUploadSize: 1024*1024*50;
					}
				});
				

				//Añadimos al entono otros componentes del framework

				// - Un objeto route
				ENV.addRoute(function(gw){gw.send("Hola Mundo!")});

				// - Un objeto plugin
				ENV.addPlugin();
				

		//- Description
		section.description
			h2#description Descripción
			:markdown
				Obtenemos acceso al entorno Pillars.js al realizar el require() de la librería. El entorno consiste en una serie de **propiedades** y **funciones** que nos permiten trabajar con el framework. La variable global `ENV` es la más importante, punto central de configuración y arranque del entorno. Además tendremos acceso a **Clases como Plugin o Route**, y a las diferentes funciones que nos permitiran construir nuestra aplicación.

				`ENV` es un objeto global cuyas propiedades conforman la configuración de nuestra aplicación y sus métodos nos permiten la construción de la misma. Disponemos de propiedades que nos permiten configurar el servicio HTTP o la conexión a la base de datos, mientras otros métodos como `.addRoute()` o `.addPlugin()` son el mecanismo para añadir controladores a nuestro entorno.

				Junto a `ENV` se establecen de forma global las referencias a clases como Plugin o Route para que sea posible instanciar dichos objetos, también acceso a funcionalidades como renderer, i18n, logger o cron. Todo esto nos ofrece un entorno de trabajo completo y centralizado cuyo **punto central** es `ENV`.

				> Nota: Puedes encontrar una referencia a las variables globales de Pillars [aquí](#).

				En el ejemplo podemos ver una configuración básica del entorno por medio de la variable ENV. Es posible establecer propiedades de forma individual o agrupada usando el método `.configure()`.

			:highlight(lang='javascript')
					ENV.configure({
						debug : true,
						directories:{
							uploads:'./uploads',
							temp:'./temp'
						},
						templates:{
							cache:false
						},
						languages : ['es','en'],
						administrator:{
							mail:'administrator@domain.com',
							firstname:'Name',
							lastname:'Surname'
						},
						server:{
							port:3000,
							timeout:10*1000
						},
						database:{
							store:'databaseName'
						},
						smtp: {
							service: 'gmail',
							auth: {
								user: 'myuser@gmail.com',
								pass: '******'
							}
						}
					});

		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-debug: code
					small ENV
					| .debug

				//- Property description
				section.description
					:markdown
						 La propiedad `.debug` establece el entorno en modo debug, lo que hará que se muestre información adicional de los errores. 
						 Es de tipo **Boolean**
						 Por defecto es: **true**

			//- Property
			section.property
				h3#property-languages: code
					small ENV
					| .languages

				//- Property description
				section.description
					:markdown
						`.languages` es de tipo **Array**. Define los idiomas disponibles en el entorno. Por defecto el idioma es `['en']`. Nótese que la consola también es traducida, de forma que si establecemos como primer idioma `['es']` los mensajes de la consola aparecerán en español.

						Cuando seteamos `.languages`, se emite el evento `languages`.

					:highlight(lang='javascript')
						//La aplicación estará disponible en tres idiomas, siendo el predeterminado 'es'.
						ENV.languages=['es','en','de'];

					:markdown
						Para conocer más acerca de los idiomas de una aplicación, consultar el módulo [Textualization (i18n)](#)


			//- Property
			section.property
				h3#property-administrator: code 
					small ENV
					| .administrator

				//- Property description
				section.description
					:markdown
						La propiedad `.administrator` permite configurar los datos del administrador/a de la aplicación. Es un conjunto de propiedades con los siguientes elementos:
						+ `mail`: para definir el email del administrador de la aplicación.
						+ `firstname`: nombre del administrador.
						+ `lastname`: apellidos del administrador.

					:highlight(lang='javascript')
						ENV.administrator={
							mail: correo@tudominio.es,
							firstname: 'Nombre' ,
							lastname: 'Apellidos'
						};

			//- Property
			section.property
				h3#property-server: code 
					small ENV
					| .server

				//- Property description
				section.description
					:markdown
						La propiedad `.server` es un conjunto de propiedades para configurar el servidor HTTP:
						* `hostname`: nombre de host. Si no se especifica ninguno, responderá a cualquier host. Por defecto es **undefined**.
						+ `port`: puerto en el que responderá el servidor HTTP.Por defecto: 3000.
						- `timeout`: tiempo de espera máximo de cualquier solicitud HTTP. Es de tipo **Integer** y expresada en milisegundos. Por defecto: 10\*1000.
						+ `maxUploadSize`: **Integer**, especifica el tamaño máximo de archivo permitido por el servidor HTTP. Por defecto 10\*1024\*1024 (10MB).
						+ `maxZipSize`: **Integer** para determinar el tamaño máximo de archivo que comprimirá el servidor. Por defecto: 5\*1024\*1024 (5MB).

					:highlight(lang='javascript')
						ENV.server={
							hostname:'127.0.0.1',
							port:80,
							timeout:100*1000,
							maxUploadSize:20*1024*1024,
							maxZipSize:10*1024*1024
						};

					:markdown
						> Nota: El servidor HTTP comprime previamente los envíos a cliente. Esta compresión la realiza dependiendo de los compresores que tenga disponibles el cliente, por defecto si está disponible usa deflate. Con la propiedad `ENV.server.maxZipSize` establecemos a partir de qué tamaño el servidor no comprimirá los archivos.

			//- Property
			section.property
				h3#property-database: code 
					small ENV
					| .database

				//- Property description
				section.description
					:markdown
						La propiedad `.database` es un conjunto de propiedades para configurar la base de datos:
						+ `store`: **String**. Nombre de la base de datos.
						+ `hostname`: **String**. Nombre de host.
						+ `port`: **Integer**. Puerto de la base de datos.
						+ `user`: **String**, nombre de usuario con privilegios para la base de datos.
						+ `password`: **String** Contraseña del usuario.

					:highlight(lang='javascript')
						ENV.database={
							store:'dbtest',
							hostname:'127.0.0.1',
							port:'27017',
							user:'myname',
							password:'mypass'
						};

					:markdown

			//- Property
			section.property
				h3#property-directories: code 
					small ENV
					| .directories

				//- Property description
				section.description
					:markdown
						La propiedad `.directories` es un conjunto de propiedades para configurar los directorios del sistema:
						+ `uploads`: **String**. Ruta relativa o absoluta del directorio donde se almacenarán los archivos subidos al servidor. Por defecto es undefined.
						+ `temp`: **String**. Ruta relativa o absoluta del directorio de archivos temporales. Por defecto es undefined.

					:highlight(lang='javascript')
						ENV.directories={
							uploads:'uploads',
							temp:'temp'
						};

					:markdown

			//- Property
			section.property
				h3#property-templates: code 
					small ENV
					| .templates

				//- Property description
				section.description
					:markdown
						La propiedad `.templates` es un conjunto de propiedades para configurar opciones de templates y templates en concreto que utilizará el sistema:
						+ `cache`: Tipo **Boolean** determina si está activa la caché de templates o no. Por defecto está activa en **true**.
						+ `static`: Tipo **String** para determinar la plantilla estática. Ésta se utiliza en el listado de directorios. Por defecto es: **./templates/static.jade**.
						+ `error`: Tipo **String** para determinarla plantilla de errores. Se utiliza en cualquier página de error del sistema, por ejemplo un error 404. Por defecto es: **./templates/error.jade**.

					:highlight(lang='javascript')
						ENV.templates={
							cache: false,
							static:'temp',
							error: ''
						};

					:markdown
						> Nota: Pillars.js cuenta por defecto con Jade como lenguaje de templating. Para aumentar la eficiencia, la primera vez que se envía la plantilla a cliente....

			//- Property
			section.property
				h3#property-smtp: code 
					small ENV
					| .smtp

				//- Property description
				section.description
					:markdown
						La propiedad `.smtp` es un conjunto de propiedades para configurar el servidor smtp.  Utiliza la librería [node-mailer](#):
						+ `hostname`: nombre de host
						+ `port`: puerto 
						+ `user`: usuario del servidor de correo. Tipo **String**.
						+ `password`: contraseña del usuario. Tipo **String**.

					:highlight(lang='javascript')
						ENV.smtp={
							hostname:'',
							port:'',
							user:'',
							password:''
						};

					:markdown


			//- Property
			section.property
				h3#property-routes: code 
					small ENV
					| .routes

				//- Property description
				section.description
					:markdown
						La propiedad `.routes` es de solo lectura. Devuelve un objeto con todos los objetos route que tiene agregado `ENV`. 

			//- Property
			section.property
				h3#property-plugins: code 
					small ENV
					| .plugins

				//- Property description
				section.description
					:markdown
						La propiedad `.plugins` es de solo lectura y devuelve un objeto con todos los objetos plugin que tiene agregado `ENV`. 

			//- Property
			section.property
				h3#property-package: code 
					small ENV
					| .package

				//- Property description
				section.description
					:markdown
						`.package` es de solo lectura. Devuelve el contenido de `package.json` en un objeto.

			//- Property
			section.property
				h3#property-version: code 
					small ENV
					| .version

				//- Property description
				section.description
					:markdown
						`.version` es de solo lectura. Devuelve la versión del framework instalada.

			//- Property
			section.property
				h3#property-path: code 
					small ENV
					| .path

				//- Property description
				section.description
					:markdown
						La propiedad `.path` es de solo lectura y devuelve el path absoluto de la librería pillars.


			//- Property
			section.property
				h3#property-status: code 
					small ENV
					| .status

				//- Property description
				section.description
					:markdown
						La propiedad `.status` es de solo lectura. Devuelve un objeto con todos los routes y plugins que la aplicación tiene añadidos, además de la configuración del entorno.



		//- Methods
		section.methods
			h2#methods Métodos

			//- Method
			section.method
				h3#method-start: code
					small ENV
					| .start()

				//- Method description
				section.description
					:markdown
						Arranca el servidor HTTP. Puede arrancar sin aceptar parámetros, por lo que se pondría en marcha con los valores por defecto. Acepta como parámetros el conjunto de propiedades [ENV.server](#property-server).

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.start( [Server configuration] , [callback] );

					:markdown
						+ *Server configuration*: Opcional. configuración del conjunto de propiedades [ENV.server](#property-server).
						+ *callback*: Opcional. Callback que se ejecutará cuando se arranque el entorno.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Inicio del servidor con los valores por defecto:
						ENV.start();

						//Inicio del servidor configurando los parámetros del servidor:
						ENV.start({
							hostname:'127.0.0.1',
							port:3000,
							timeout:100*1024,
							maxUploadSize:1024*1024,
							maxZipSize:1024*1024
						});

						//Inicio del servidor con callback
						ENV.start(
						{
							port:3000,
						},

						function(){
							console.log("Servidor arrancado");
						});

			//- Method
			section.method
				h3#method-stop: code
					small ENV
					| .stop()

				//- Method description
				section.description
					:markdown
						Detiene el servidor HTTP.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.stop( [callback] );

					:markdown
						+ *callback*: Opcional. Callback que se ejecutará cuando se detenga el entorno.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Detención del servidor HTTP
						ENV.stop();

						//Detención de servidor con callback
						ENV.stop(function(){
							console.log("Servidor parado");
						});

			//- Method
			section.method
				h3#method-connect: code
					small ENV
					| .connect()

				//- Method description
				section.description
					:markdown
						Conecta a una base de datos MongoDB. Acepta como parámetros el conjunto de propiedades [ENV.database](#property-database).

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.connect( database configuration [, callback]);

					:markdown
						+ *database configuration*: [conjunto de propiedades para configurar la base de datos.](#property-database)
						+ *callback*: Opcional. Callback que se ejecutará cuando se arranque el entorno.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Conecta a la base de datos con los parámetros indicados: 
						ENV.connect({
							store: 'dbtest'
							hostname:'127.0.0.1',
							port:27017,
							user: 'myname',
							pass: 'mypass'
						});

						//Inicio del servidor con callback
						ENV.connect(
						{
							store: 'dbtest'
							hostname:'127.0.0.1',
							port:27017,
							user: 'myname',
							pass: 'mypass'
						},

						function(){
							console.log("Conexión a base de datos realizada");
						});

			//- Method
			section.method
				h3#method-disconnect: code
					small ENV
					| .disconnect()

				//- Method description
				section.description
					:markdown
						Desconecta la base de datos MongoDB.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.disconnect( [callback] );

					:markdown
						+ *callback*: Opcional. Callback que se ejecutará cuando se desconecte la base de datos.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Desconecta la base de datos 
						ENV.disconnect();

						//Desconecta la base de datos con callback
						ENV.disconnect(function(){
							console.log("Desconexión de la base de datos realizada");
						});


			

			//- Method
			section.method
				h3#method-addRoute: code
					small ENV
					| .addRoute()

				//- Method description
				section.description
					:markdown
						El método `.addRoute()` añade controladores a la aplicación, es decir, un objeto de la [Clase Route](route.jade). 
						Acepta como parámetro el objeto creado previamente, o la configuración para su creación, por lo que lo podemos añadir de dos formas.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.addRoute( route object );

					:markdown
						+ *route object*: Objeto route creado previamente.

					codesyntax.
						ENV.addRoute( [route configuration] , [controller] );

					:markdown
						+ *route configuration*: objeto de configuración para la creación del route.
						+ *controller*: controlador para el nuevo route.

						> Nota: Es posible crear un objeto route sin configuración y sin controlador, éste actuaría en el path '/' y no ejecutaría ningún controlador para dicho path. Crear un objeto tipo route con estas características no tendría mucho sentido, pero es posible.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						// Objeto route creado previamente

						var route = new Route(
							{
								id:'home', 
								path:'/'
							},
							function(gw){
								gw.send("Hola Mundo");
							}
						);


						// Añadimos el objeto route al entorno

						ENV.addRoute(route);

					:highlight(lang='javascript')
						// Pasamos los parámetros para la creación del objeto route al método addRoute. 
						// Se crea y añade al entorno simultáneamente

						ENV.addRoute(
							{
								id: 'home',
								path:'/'
							},

							function(gw){
								gw.send("Hola Mundo");
							});


					.msg.msg-icon.bg-alert La segunda forma de creación no admite anidación de distintos objetos tipo Route.

		
			//- Method
			section.method
				h3#method-getRoute: code
					small ENV
					| .getRoute()

				//- Method description
				section.description
					:markdown
						Captura un objeto tipo route hijo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.getRoute( route id );

					:markdown
						+ *route id*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						route = ENV.getRoute("home");
			
			//- Method
			section.method
				h3#method-removeRoute: code
					small ENV
					| .removeRoute()

				//- Method description
				section.description
					:markdown
						Elimina un objeto tipo Route hijo. Toma como parámetro el id del route previamente creado.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.removeRoute( route id );

					:markdown
						+ *route id*: **String** identificador del objeto route.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						ENV.removeRoute("home");

			//- Method
			section.method
				h3#method-addPlugin: code
					small ENV
					| .addPlugin()

				//- Method description
				section.description
					:markdown
						El método `.addPlugin()` añade un objeto de la Clase Plugin a la aplicación.

						Acepta como parámetro el objeto plugin creado previamente o la configuración para la creación del mismo.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.addPlugin( plugin );

					:markdown
						+ *plugin*: **objeto plugin** creado previamente.

					codesyntax.
						ENV.addPlugin( plugin configuration , controller );

					:markdown
						+ *plugin configuration*: configuración para la creación del plugin.
						+ *controller*: controlador que ejecutará el plugin.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						//Creación del objeto plugin
						var plugin = new Plugin(
							{
								id: 'pluginOne'
							}, 
							function(gw, next){
								//...
								next();
							}
						);
						
						//Adicción del objeto plugin al entorno
						ENV.addPlugin(plugin);

					:highlight(lang='javascript')
						//Parámetros para la creación del plugin pasados a addPlugin
						//Creación y adicción simultánea.
						ENV.addPlugin(
							{
								id: 'pluginOne'
							},

							function(gw,next){
								//...
								next();
							});

			//- Method
			section.method
				h3#method-getPlugin: code
					small ENV
					| .getPlugin()

				//- Method description
				section.description
					:markdown
						Captura un objeto tipo Plugin. 

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.getPlugin( plugin id );

					:markdown
						+ *plugin id*: **String** identificador del objeto plugin.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						plugin = ENV.getPlugin("pluginOne");

			//- Method
			section.method
				h3#method-removePlugin: code
					small ENV
					| .removePlugin()

				//- Method description
				section.description
					:markdown
						Elimina un objeto tipo Plugin del entorno. Toma como parámetro el id del plugin previamente creado.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.removePlugin( plugin id );

					:markdown
						+ *plugin id*: **String** identificador del objeto plugin.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						ENV.removePlugin("pluginOne");

			//- Method
			section.method
				h3#method-add: code
					small ENV
					| .add()

				//- Method description
				section.description
					:markdown
						Añade un objeto de la Clase Route o un objeto de la Clase Plugin. Es un método de ahorro de escritura para el desarrollador.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.add( route );

					:markdown
						+ *route*: **objeto route**.

					codesyntax.
						ENV.add( plugin );

					:markdown
						+ *plugin*: **objeto plugin**.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						var route = new Route(function(gw){
							gw.send("Hola Mundo!");
						});

						ENV.add(route);


						var plugin = new Plugin(function(gw,next){
							next();
						});

						ENV.add(plugin)

		
			//- Method
			section.method
				h3#method-configure: code
					small ENV
					| .configure()

				//- Method description
				section.description
					:markdown
						El método `.configure()` permite setear en un solo objeto toda la configuración del entorno.

				//- Method syntax
				section.syntax
					h4 Sintaxis y ejemplo
					:highlight(lang='javascript')
						ENV.configure({
							debug : true,
							directories:{
								uploads:'./uploads',
								temp:'./temp'
							},
							templates:{
								cache:false
							},
							languages : ['es','en'],
							administrator:{
								mail:'administrator@domain.com',
								firstname:'Name',
								lastname:'Surname'
							},
							server:{
								port:3000,
								timeout:10*1000
							},
							database:{
								store:'databaseName'
							},
							smtp: {
								service: 'gmail',
								auth: {
									user: 'myuser@gmail.com',
									pass: '******'
								}
							}
						});

					




			//- Method
			section.method
				h3#method-resolve: code
					small ENV
					| .resolve()

				//- Method description
				section.description
					:markdown
						Devuelve una ruta absoluta sobre un directorio relativo respecto al directorio de ejecución de la librería `pillars`. 

				//- Method syntax
				section.syntax
					h4 Sintaxis
					codesyntax.
						ENV.resolve( directory );

					:markdown
						+ *directory*: **String** del directorio relativo.

				section.example
					h4 Ejemplo
					:highlight(lang='javascript')
						pathStatic = ENV.resolve('./static');


		//- Eventos
		section.events
			h2#events Eventos

			section.event
				h3#property-debug: code
					| languages

				:markdown
					Cuando la propiedad `.languages` es seteada se emite el evento **'languages'**. 

				:highlight(lang='javascript')
					//Capturar el evento
					ENV.on('languages');

				h3#property-debug: code
					| database

				:markdown
					Se emite el evento **'database'** cuando la conexión a la base de datos es seteada.

				:highlight(lang='javascript')
					//Capturar el evento database con callback
					ENV.on('database' , function(){
						ENV.database.getCollection('sessions');
					});

		//- Examples
		section.examples
			h2#examples Ejemplos

			//- Example
			section.example
				h3#example-1 Ejemplo 1. Primer Contacto.
				:markdown
					El código fuente de este ejemplo está en .... 
				:highlight(lang='javascript')
					require("pillars").start();

					ENV.configure(
						debug:true,
						languages:['es','en'],
						administrator:{
							mail:'youremail@domain.com',
							firstname:'name',
							lastname:'surname'
						},
						server:{
							port:80,
						},
						smtp{
							service: 'gmail',
							auth: {
								user: 'myuser@gmail.com',
								pass: '******'
							}
						}
					);

				:markdown
					En el ejemplo lo primero que hemos hecho ha sido incluir la librería `pillars` y seguidamente ejecutar el método `.start()`. En este punto de la aplicación tenemos en el puerto `3000`, que es el puerto por defecto, el servicio HTTP arrancado, pero como no hemos definido rutas a atender,  si consultamos `/` tendremos como resultado un `Error 404: Not Found`.
					
					Al realizar la inclusión de la librería `pillars`, también estará disponible el **directorio público estático**, que por defecto está disponible en el path `/pillars` y en el directorio `static`. Contiene CSS, JS, NG y toda la documentación del framework en: `docs/reference/`. Para más información puedes consultar el [Módulo Static](#)

					Seguidamente con el método `.configure()` hemos configurado: idiomas, datos del administrador, puerto en el que servirá la aplicación web y smtp. Puedes encontrar todas las opciones configurables de `ENV` en las [Propiedades](#properties).

					> Nota: Al establecer como idioma predeterminado `es` a través de la propiedad `.language`, hemos configurado que los mensajes aparezcan en Español. En este punto de la aplicación si volvemos a consultar el path: `/` veremos el error 404 como 'Error 404: La página no existe, disculpe las molestias', es decir, en Español. Para saber más consulta el [Módulo i18n](#)

					La [clase Route](#) permite crear el par ruta-manejador. Añadimos a `ENV` las rutas, y los manejadores para las mismas, mediante el método `.addRoute(configuración, manejador);`.  
					
					En la configuración para la creación del Route especificamos, entre otras cosas, la ruta o path, y en el segundo parámetro declaramos el manejador que atenderá en el path especificado. En el caso de no especificar path, por defecto será `/`. Seguidamente vamos a añadir un Route a `ENV`, mediante el método `.addRoute()`. 

				:highlight(lang='javascript')
					ENV.addRoute(
						{
							path:'/'
						},

						function(gw){
							gw.send("Hola Mundo");
						}
					);

				:markdown
					Ahora la aplicación responderá en `/` el mensaje *Hola Mundo*. 

					> Nota: Nótese que como hemos definido el entorno en dos idiomas se crean subrutas para el resto de idiomas. En este caso tendremos disponible el árbol de rutas `/en/` y `/es/`, y en `/` estará el idioma definido como predeterminado.
					
					El par configuración-manejador es un objeto route. Seguidamente vamos a crear primero el objeto y posteriormente añadirlo a `ENV`:

				:highlight(lang='javascript')
					route = new Route(
						{
							path:'/email'
						},
						function(gw){
							Mailer.send(
								to: "youremail@domain.com"
								subject: "Hola!",
								html: "Hola! Este correo electrónico fue enviado con el framework Pillars.js"
							);
						});

					ENV.addRoute(route);

				:markdown
					Al haber configurado el servidor smtp, tenemos disponible la [librería Mailer](#), y mediante el método `.send()` enviamos un correo electrónico. Por lo tanto, dada la configuración del `Route`, cuando el usuario visite la URL `/email` automáticamente se enviará un email a la dirección descrita en el parámetro `to:`.

					> Nótese que hemos añadido el `Route`, primero creándolo mediante `route = new Route(...)` y posteriormente agregándolo a `ENV` con el método `.addRoute()`.

				//- Example
			



			section.example
				h3#example-2 Ejemplo 2. Conexión a base de datos.
				:markdown
					El código fuente de este ejemplo está en .... 
				:highlight(lang='javascript')
					require("pillars").start();

					ENV.configure(
						database:{
							hostname:'youremail@domain.com',
							user:'name',
							password:'surname'
						}
					);

				:markdown
					

				:highlight(lang='javascript')
					ENV.addRoute(
						{
							path:'/'
						},

						function(gw){
							gw.send("Hola Mundo");
						}
					);

				:markdown
					Ahora la aplicación responderá en `/` el mensaje *Hola Mundo*. 

					> Nótese que como hemos definido el entorno en dos idiomas se crean subrutas para el resto de idiomas. En este caso tendremos disponible el árbol de rutas `/en/` y `/es/`, y en `/` estará el idioma definido como predeterminado.
					
					El par configuración-manejador es un objeto route. Seguidamente vamos a crear primero el objeto y posteriormente añadirlo a `ENV`:

				:highlight(lang='javascript')
					route = new Route(
						{
							path:'/email'
						},
						function(gw){
							Mailer.send(
								to: "youremail@domain.com"
								subject: "Hola!",
								html: "Hola! Este correo electrónico fue enviado con el framework Pillars.js"
							);
						});

					ENV.addRoute(route);

				:markdown
					Al haber configurado el servidor smtp, tenemos disponible la [librería Mailer](#), y mediante el método `.send()` enviamos un correo electrónico. Por lo tanto, dada la configuración del `Route`, cuando el usuario visite la URL `/email` automáticamente se enviará un email a la dirección descrita en el parámetro `to:`.

					> Nótese que hemos añadido el `Route`, primero creándolo mediante `route = new Route(...)` y posteriormente agregándolo a `ENV` con el método `.addRoute()`.

