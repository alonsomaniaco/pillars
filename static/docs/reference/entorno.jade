include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Reference',url:'/pillars/docs/reference/'},{label:'Entorno (ENV)',url:'/pillars/docs/reference/entorno.jade'}];
	+reference-layout("Pillars.js Reference - Entorno (ENV) - 'make it easy!'",path)

		#title
			h1 ENV (Entorno)
				em  Pillars.js Reference
			a.source(href="#") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				Al realizar la inclusión de la librería con `.require('pillars')` tenemos disponible la variable global `ENV`. 		

				Mediante esta variable se **configura el entorno** de la aplicación, se arranca el servidor HTTP, se conecta a la base de datos, se añaden rutas y manejadores a la aplicación y también se añaden Plugins.

				Para setar el entorno de la aplicación de forma más eficiente podemos hacerlo mediante el método `ENV.configure()`.
	
				
		//- Syntax
		section.syntax
			h2#syntax Sintaxis
			:highlight(lang='javascript')
				//Inclusión de la librería y método start() para arrancar el servidor.
				require("pillars").start();

				//Configuración del entorno
				ENV.languages=['es','en'];
				ENV.debug=false;
				ENV.server{
					port:80,
					maxUploadSize: 1000
				};

		//- Description
		section.description
			h2#description Descripción
			:markdown
				`ENV` **configura** el funcionamiento del servidor HTTP, la base de datos, idiomas de la aplicación, datos del administrador, configuración smtp del servidor, templates y directorios de la aplicación. Por otra parte también **arranca el servidor HTTP**, **conecta a la base de datos**, añade a la aplicación **rutas y manejadores**, y **plugins**.

				Para configurar el servidor HTTP lo hacemos con la propiedad [`.server`](#property-server), que nos permite configurar opciones como puerto y host, entre otras. Si necesitamos configurar una base de datos lo haremos mediante [`.database`](#property-database), será necesaria la conexión a la base de datos si vamos a utilizar el Plugin de sesiones. Con la propiedad [`.smtp`](#property-smtp) se configura el servidor smtp, que utilizará el [Módulo Mailer](#) para el envío de correos y con la propiedad [`.languages`](#property-languages) definimos los idiomas en los que trabajará la aplicación. 

				> Al definir varios idiomas en la aplicación mediante `ENV.languages`, el primer idioma del array es el idioma predeterminado, y por lo tanto el idioma al que se traducirá la consola y mensajes del entorno. Además tendremos disponible, una vez arranquemos la aplicación, todas las subrutas para los diferentes idiomas: `http://midominio.com/es/`, `http://midominio.es/en/`, `http://midominio.com/de/`. Estando en la ruta raíz `http://midominio` el idioma por defecto será el que se definió. Consulta la [librería Textualization](#) para saber más.

				Otros parámetros que podremos configurar son los directorios que usará la aplicación, tanto el directorio de subida de archivos como el directorio de archivos temporales. Lo hacemos mediante [`ENV.directories`](#property-directories). También se puede definir los templates que usará la aplicación o activar el sistema de caché de los templates con [`ENV.templates`](#property-templates) .

				> El motor por defecto de renderizado de Pillars.js es Jade. Podrás añadir otros motores de renderizado como XXXX gracias al [Módulo Renderer](#). aquí hablar más del módulo de renderer.

				Finalmente también tenemos la posibilidad de configurar en `ENV` los datos del [administrador de la aplicación](#property-administrator), y activar o desactivar el [modo debug](#property-debug). 


				Para arrancar el servidor HTTP ejecutamos el método [`.start()`](#method-start), que tomará como valores los configurados en la propiedad `.server`, en otro caso, arrancará con los valores por defecto. Paramos el servicio con [`.stop()`](#method-stop). La conexión a una base de datos se realiza con [`.connect()`](#method-connect) y la desconexión con [`.disconnect()`](#method-disconnect) que igualmente se realizará con los datos configurados en la propiedad `.database`, en este caso si es necesario configurar el nombre de la base de datos. 

				Respecto a las rutas que atenderá la aplicación y los manejadores, tenemos el conjunto de métodos de `ENV` que trabaja con la [Clase Route](#), que son [`.addRoute()`](#method-addRoute), [`.getRoute()`](#method-getRoute) y [`.removeRoute()`](#method-removeRoute). Estos métodos son para añadir un objeto route, recuperar un objeto route y eliminarlo de `ENV` respectivamente.

				Finalmente `ENV` cuenta con el conjunto de métodos para añadir, recuperar y eliminar instancias de la [Clase Plugin](). 





		//- Properties
		section.properties
			h2#properties Propiedades

			//- Property
			section.property
				h3#property-debug: code
					small ENV
					| .debug

				//- Property description
				section.description
					:markdown
						 La propiedad `.debug` establece el entorno en modo debug, lo que hará que se muestre información adicional de los errores. 
						 Es de tipo **Boolean**
						 Por defecto es: **true**

			//- Property
			section.property
				h3#property-languages: code
					small ENV
					| .languages

				//- Property description
				section.description
					:markdown
						`.languages` es de tipo **Array**. Define los idiomas disponibles en el entorno. Por defecto el idioma es `['en']`. Nótese que la consola también es traducida, de forma que si establecemos como primer idioma `['es']` los mensajes de la consola aparecerán en español.

						Cuando seteamos `.languages`, se emite el evento `languages`.

					:highlight(lang='javascript')
						//La aplicación estará disponible en tres idiomas, siendo el predeterminado 'es'.
						ENV.languages=['es','en','de'];

					:markdown
						Para conocer más acerca de los idiomas de una aplicación, consultar el módulo [Textualization (i18n)](#)


			//- Property
			section.property
				h3#property-administrator: code 
					small ENV
					| .administrator

				//- Property description
				section.description
					:markdown
						La propiedad `.administrator` permite configurar los datos del administrador/a de la aplicación. Es un conjunto de propiedades con los siguientes elementos:
						+ `mail`: para definir el email del administrador de la aplicación.
						+ `firstname`: nombre del administrador.
						+ `lastname`: apellidos del administrador.

					:highlight(lang='javascript')
						ENV.administrator={
							mail: correo@tudominio.es,
							firstname: 'Nombre' ,
							lastname: 'Apellidos'
						};

			//- Property
			section.property
				h3#property-server: code 
					small ENV
					| .server

				//- Property description
				section.description
					:markdown
						La propiedad `.server` es un conjunto de propiedades para configurar el servidor HTTP:
						* `hostname`: nombre de host. Si no se especifica ninguno, responderá a cualquier host. Por defecto es **undefined**.
						+ `port`: puerto en el que responderá el servidor HTTP.Por defecto: 3000.
						- `timeout`: tiempo de espera máximo de cualquier solicitud HTTP. Es de tipo **Integer** y expresada en milisegundos. Por defecto: 10\*1000.
						+ `maxUploadSize`: **Integer**, especifica el tamaño máximo de archivo permitido por el servidor HTTP. Por defecto 10\*1024\*1024 (10MB).
						+ `maxZipSize`: **Integer** para determinar el tamaño máximo de archivo que comprimirá el servidor. Por defecto: 5\*1024\*1024 (5MB).

					:highlight(lang='javascript')
						ENV.server={
							hostname:'127.0.0.1',
							port:80,
							timeout:100*1000,
							maxUploadSize:20*1024*1024,
							maxZipSize:10*1024*1024
						};

					:markdown
						> El servidor HTTP comprime previamente los envíos a cliente. Esta compresión la realiza dependiendo de los compresores que tenga disponibles el cliente, por defecto si está disponible usa deflate. Con la propiedad `.maxZipSize` establecemos a partir de qué tamaño el servidor no comprimirá los archivos.

			//- Property
			section.property
				h3#property-database: code 
					small ENV
					| .database

				//- Property description
				section.description
					:markdown
						La propiedad `.database` es un conjunto de propiedades para configurar la base de datos:
						+ `store`: **String**. Nombre de la base de datos.
						+ `hostname`: **String**. Nombre de host.
						+ `port`: **Integer**. Puerto de la base de datos.
						+ `user`: **String**, nombre de usuario con privilegios para la base de datos.
						+ `password`: **String** Contraseña del usuario.

					:highlight(lang='javascript')
						ENV.database={
							store:'dbtest',
							hostname:'127.0.0.1',
							port:'27017',
							user:'myname',
							password:'mypass'
						};

					:markdown

			//- Property
			section.property
				h3#property-directories: code 
					small ENV
					| .directories

				//- Property description
				section.description
					:markdown
						La propiedad `.directories` es un conjunto de propiedades para configurar los directorios de subidas y temporal:
						+ `uploads`: **String**. Ruta relativa o absoluta del directorio donde se almacenarán los archivos subidos al servidor. Por defecto es undefined.
						+ `temp`: **String**. Ruta relativa o absoluta del directorio de archivos temporales. Por defecto es undefined.

					:highlight(lang='javascript')
						ENV.directories={
							uploads:'uploads',
							temp:'temp'
						};

					:markdown

			//- Property
			section.property
				h3#property-templates: code 
					small ENV
					| .templates

				//- Property description
				section.description
					:markdown
						La propiedad `.templates` es un conjunto de propiedades para configurar opciones de los templates:
						+ `cache`: Tipo **Boolean** determina si está activa la caché de templates o no. Por defecto está activa en **true**.
						+ `static`: Tipo **String** para determinar la plantilla estática. Por defecto es: **./templates/static.jade**.
						+ `error`: Tipo **String** para determinarla plantilla de errores. Por defecto es: **./templates/error.jade**.

					:highlight(lang='javascript')
						ENV.templates={
							cache: false,
							static:'temp',
							error: ''
						};

					:markdown
						> Pillars.js cuenta por defecto con Jade como lenguaje de templating. Para aumentar la eficiencia, la primera vez que se envía la plantilla a cliente....

			//- Property
			section.property
				h3#property-smtp: code 
					small ENV
					| .smtp

				//- Property description
				section.description
					:markdown
						La propiedad `.smtp` es un conjunto de propiedades para configurar opciones de los templates:
						+ `hostname`: 
						+ `port`: 
						+ `user`: usuario del servidor de correo. Tipo **String**.
						+ `password`: contraseña del usuario. Tipo **String**.

					:highlight(lang='javascript')
						ENV.smtp={
							hostname:'',
							port:'',
							user:'',
							password:''
						};

					:markdown


			//- Property
			section.property
				h3#property-routes: code 
					small ENV
					| .routes

				//- Property description
				section.description
					:markdown
						La propiedad `.routes` es de solo lectura. Devuelve un objeto con todos los objetos route que tiene agregado `ENV`. 

			//- Property
			section.property
				h3#property-plugins: code 
					small ENV
					| .plugins

				//- Property description
				section.description
					:markdown
						La propiedad `.plugins` es de solo lectura y devuelve un objeto con todos los objetos plugin que tiene agregado `ENV`. 

			//- Property
			section.property
				h3#property-package: code 
					small ENV
					| .package

				//- Property description
				section.description
					:markdown
						`.package` es de solo lectura. Devuelve el contenido de `package.json` en un objeto.

			//- Property
			section.property
				h3#property-version: code 
					small ENV
					| .version

				//- Property description
				section.description
					:markdown
						`.version` es de solo lectura. Devuelve la versión del framework instalada.

			//- Property
			section.property
				h3#property-path: code 
					small ENV
					| .path

				//- Property description
				section.description
					:markdown
						La propiedad `.path` es de solo lectura y devuelve el path absoluto de la librería pillars.


			//- Property
			section.property
				h3#property-status: code 
					small ENV
					| .status

				//- Property description
				section.description
					:markdown
						La propiedad `.status` es de solo lectura. Devuelve un objeto con todos los routes y todos los plugins que la aplicación tiene añadidos.



		//- Methods
		section.methods
			h2#methods Métodos

			//- Method
			section.method
				h3#method-start: code
					small ENV
					| .start()

				//- Method description
				section.description
					:markdown
						El método `.start()` arranca el servidor HTTP. Puede arrancar sin aceptar parámetros, por lo que arrancaría con los valores por defecto. Acepta como parámetros el conjunto de propiedades [ENV.server](#property-server).

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						//Inicio del servidor con los valores por defecto:
						ENV.start();

						//Inicio del servidor configurando los parámetros del servidor:
						ENV.start({
							hostname:'127.0.0.1',
							port:3000,
							timeout:100*1024,
							maxUploadSize:1024*1024,
							maxZipSize:1024*1024
						});

						//Inicio del servidor con callback
						ENV.start(
						{
							port:3000,
						},

						function(){
							console.log("Servidor arrancado");
						});

			//- Method
			section.method
				h3#method-stop: code
					small ENV
					| .stop()

				//- Method description
				section.description
					:markdown
						El método `.stop()` detiene el servidor HTTP.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						//Detención del servidor HTTP
						ENV.stop();

						//Detención de servidor con callback
						ENV.stop(function(){
							console.log("Servidor parado");
						});

			//- Method
			section.method
				h3#method-connect: code
					small ENV
					| .connect()

				//- Method description
				section.description
					:markdown
						El método `.connect()` conecta a una base de datos MongoDB. Acepta como parámetros el conjunto de propiedades [ENV.database](#property-database).

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						//Conecta a la base de datos con los parámetros indicados: 
						ENV.connect({
							store: 'dbtest'
							hostname:'127.0.0.1',
							port:27017,
							user: 'myname',
							pass: 'mypass'
						});

						//Inicio del servidor con callback
						ENV.connect(
						{
							store: 'dbtest'
							hostname:'127.0.0.1',
							port:27017,
							user: 'myname',
							pass: 'mypass'
						},

						function(){
							console.log("Conexión a base de datos realizada");
						});

			//- Method
			section.method
				h3#method-disconnect: code
					small ENV
					| .disconnect()

				//- Method description
				section.description
					:markdown
						El método `.disconnect()` desconecta la base de datos MongoDB.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						//Desconecta la base de datos 
						ENV.disconnect();

						//Desconecta la base de datos con callback
						ENV.disconnect(function(){
							console.log("Desconexión de la base de datos realizada");
						});


			

			//- Method
			section.method
				h3#method-addRoute: code
					small ENV
					| .addRoute()

				//- Method description
				section.description
					:markdown
						El método `.addRoute()` añade el par path-manejador a la aplicación, es decir, un objeto tipo Route. 
						Acepta como parámetro el objeto creado previamente, o la configuración para su creación.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						//Objeto route creado previamente
						ENV.addRoute(route);

						//Parámetros para la creación del route
						ENV.addRoute(
							{
								id: 'home',
								path:'/'
							},

							function(gw){
								gw.send("Hola Mundo");
							});

					section.parameters
						h5 Parámetros
						dl
							dt route
							dd
								:markdown
									Objeto de la Clase Route.

					.msg.msg-icon.bg-alert La segunda forma de creación no admite anidación de distintos objetos tipo Route.

		
			//- Method
			section.method
				h3#method-getRoute: code
					small ENV
					| .getRoute()

				//- Method description
				section.description
					:markdown
						El método `.getRoute()` captura un objeto tipo route. 

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						route = ENV.getRoute("home");

					section.parameters
						h5 Parámetros
						dl
							dt id
							dd
								:markdown
									id del objeto route.

			
			//- Method
			section.method
				h3#method-removeRoute: code
					small ENV
					| .removeRoute()

				//- Method description
				section.description
					:markdown
						El método `.removeRoute()` elimina un objeto tipo Route del entorno. Toma como parámetro el id del route previamente creado.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						ENV.removeRoute("home");

					section.parameters
						h5 Parámetros
						dl
							dt id
							dd
								:markdown
									id del objeto route.
				



			//- Method
			section.method
				h3#method-addPlugin: code
					small ENV
					| .addPlugin()

				//- Method description
				section.description
					:markdown
						El método `.addPlugin()` añade un objeto tipo Plugin a la aplicación.

						Acepta como parámetro el objeto plugin creado previamente o la configuración para la creación del mismo.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						//Objeto route creado previamente
						ENV.addPlugin(plugin);

						//Parámetros para la creación del plugin
						ENV.addPlugin(
							{
								id: 'pluginOne'
							},

							function(gw,next){
							//....
							});



					section.parameters
						h5 Parámetros
						dl
							dt plugin
							dd
								:markdown
									Objeto de la Clase Plugin.  

		
		

			
			//- Method
			section.method
				h3#method-getPlugin: code
					small ENV
					| .getPlugin()

				//- Method description
				section.description
					:markdown
						El método `.getPlugin()` captura un objeto tipo Plugin. 

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						plugin = ENV.getPlugin("pluginOne");

					section.parameters
						h5 Parámetros
						dl
							dt id
							dd
								:markdown
									id del objeto plugin.



			//- Method
			section.method
				h3#method-removePlugin: code
					small ENV
					| .removePlugin()

				//- Method description
				section.description
					:markdown
						El método `.removePlugin()` elimina un objeto tipo Plugin del entorno. Toma como parámetro el id del plugin previamente creado.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						ENV.removePlugin("pluginOne");

					section.parameters
						h5 Parámetros
						dl
							dt id
							dd
								:markdown
									id del objeto plugin.
				



			//- Method
			section.method
				h3#method-add: code
					small ENV
					| .add()

				//- Method description
				section.description
					:markdown
						El método `.add()` añade un objeto tipo Route o un objeto tipo Plugin. Es un método de ahorro de escritura para el desarrollador.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						ENV.add(route);
						ENV.add(plugin)

					section.parameters
						h5 Parámetros
						dl
							dt route
							dd
								:markdown
									Objeto de la Clase Route.
							dt plugin
							dd
								:markdown
									Objeto de la Clase Plugin. 

	


		
			//- Method
			section.method
				h3#method-configure: code
					small ENV
					| .configure()

				//- Method description
				section.description
					:markdown
						El método `.configure()` permite setear en un solo objeto toda la configuración del entorno.

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						ENV.configure({
							debug : true,
							directories:{
								uploads:'./uploads',
								temp:'./temp'
							},
							templates:{
								cache:false
							},
							languages : ['es','en'],
							administrator:{
								mail:'administrator@domain.com',
								firstname:'Name',
								lastname:'Surname'
							},
							server:{
								port:3000,
								timeout:10*1000
							},
							database:{
								store:'databaseName'
							},
							smtp: {
								service: 'gmail',
								auth: {
									user: 'myuser@gmail.com',
									pass: '******'
								}
							}
						});

					




			//- Method
			section.method
				h3#method-resolve: code
					small ENV
					| .resolve()

				//- Method description
				section.description
					:markdown
						El método `.resolve()` devuelve una ruta absoluta sobre un directorio relativo respecto al directorio de ejecución de la librería `pillars`. 

				//- Method syntax
				section.syntax
					h4 Syntax
					:highlight(lang='javascript')
						pathStatic = ENV.resolve('./static');

					section.parameters
						h5 Parámetros
						dl
							dt directory
							dd
								:markdown
									Ruta relativa del directorio.



		//- Examples
		section.examples
			h2#examples Examples

			//- Example
			section.example
				h3#example-1 Example 1
				:markdown
					Class `App` _Example 1_ lorem ipsum __synopsis__ hola [link to Google!](http://google.com)

				:highlight(lang='javascript')
					var app = new App([{
						database:'',
						languages:['en'],
						port:3000,
						host:'*'
					}]);

				:markdown
				:highlight(lang='javascript')
					require("pillars").start();

					ENV.configure(
						debug:true,
						languages:['es','en'],
						administrator:{
							mail:'youremail@domain.com',
							firstname:'name',
							lastname:'surname'
						},
						server:{
							port:80,
						},
						smtp{
							service: 'gmail',
							auth: {
								user: 'myuser@gmail.com',
								pass: '******'
							}
						}
					);

				:markdown
					En el ejemplo lo primero que hemos hecho ha sido incluir la librería `pillars` y seguidamente ejecutar el método `.start()`. En este punto de la aplicación tenemos en el puerto `3000`, que es el puerto por defecto, el servicio HTTP arrancado, pero como no hemos definido rutas a atender,  si consultamos `/` tendremos como resultado un `Error 404: Not Found`.
					
					Al realizar la inclusión de la librería `pillars`, también estará disponible el **directorio público estático**, que por defecto está disponible en el path `/pillars` y en el directorio `static`. Contiene CSS, JS, NG y toda la documentación del framework en: `docs/reference/`. Para más información puedes consultar el [Módulo Static](#)

					Seguidamente con el método `.configure()` hemos configurado: idiomas, datos del administrador, puerto en el que servirá la aplicación web y smtp. Puedes encontrar todas las opciones configurables de `ENV` en las [Propiedades](#properties).

					> Al establecer como idioma predeterminado `es` a través de la propiedad `.language`, hemos configurado que los mensajes nos aparezcan en Español. En este punto de la aplicación si volvemos a consultar el path: `/` veremos el error 404 como 'Error 404: La página no existe, disculpe las molestias', es decir, en Español. Para saber más consulta el [Módulo i18n](#)

					La [clase Route](#) permite crear el par ruta-manejador. Añadimos a `ENV` las rutas, y los manejadores para las mismas, mediante el método `.addRoute(configuración, manejador);`.  
					
					En la configuración para la creación del Route especificamos, entre otras cosas, la ruta o path, y en el segundo parámetro declaramos el manejador que atenderá en el path especificado. En el caso de no especificar path, por defecto será `/`. Seguidamente vamos a añadir un Route a `ENV`, mediante el método `.addRoute()`. 

				:highlight(lang='javascript')
					ENV.addRoute(
						{
							path:'/'
						},

						function(gw){
							gw.send("Hola Mundo");
						}
					);

				:markdown
					Ahora la aplicación responderá en `/` el mensaje *Hola Mundo*. 

					> Nótese que como hemos definido el entorno en dos idiomas se crean subrutas para el resto de idiomas. En este caso tendremos disponible el árbol de rutas `/en/` y `/es/`, y en `/` estará el idioma definido como predeterminado.
					
					El par configuración-manejador es un objeto route. Seguidamente vamos a crear primero el objeto y posteriormente añadirlo a `ENV`:

				:highlight(lang='javascript')
					route = new Route(
						{
							path:'/email'
						},
						function(gw){
							Mailer.send(
								to: "youremail@domain.com"
								subject: "Hola!",
								html: "Hola! Este correo electrónico fue enviado con el framework Pillars.js"
							);
						});

					ENV.addRoute(route);

				:markdown
					Al haber configurado el servidor smtp, tenemos disponible la [librería Mailer](#), y mediante el método `.send()` enviamos un correo electrónico. Por lo tanto, dada la configuración del `Route`, cuando el usuario visite la URL `/email` automáticamente se enviará un email a la dirección descrita en el parámetro `to:`.

					> Nótese que hemos añadido el `Route`, primero creándolo mediante `route = new Route(...)` y posteriormente agregándolo a `ENV` con el método `.addRoute()`.


