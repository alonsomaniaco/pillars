include ../.layout.jade

doctype html
html(lang=gw.language)
	+reference-layout("Pillars.js Reference - Librería pillars - 'make it easy!'")

		#title
			h1 Framework Pillars.js
				em  Pillars.js Reference
			a.source(href="https://github.com/bifuer/pillars/blob/master/pillars.js") Source

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				El framework **Pillars.js** ofrece un entorno de desarrollo web **modular** y **escalable** en Node.js.

				Para utilizar sus funcionalidades debemos realizar el `require` al comienzo de nuestra aplicación `var pillars = require('pillars');`.
				
				También podemos usar los métodos `.global()` para hacer que las clases más importantes estén accesibles de forma global, y el método `.configure()` para configurar el entorno de trabajo Pillars.js y el funcionamiento del servidor en un solo paso al comienzo de la aplicación.
				
							

		//- Syntax
		section.syntax
			h2#syntax Sintaxis
			code.codeblock.
				var pillars = require('pillars');

			
		//- Description
		section.description
			h2#description Descripción
			:markdown
				**Pillars.js** es un framework para el desarrollo de aplicaciones Web en Node.js. Está destinado por tanto a desarrolladores/as ;).

		//- Properties --------------------------------------------------------
		section.properties
			h2#properties Propiedades


			//- Property
			section.property
				h3#property-errorsTemplate: code
					| pillars.errorsTemplate

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**String** que especifica el Template para renderizar las páginas de error. **Por defecto**: ['templates/error.jade'](https://github.com/bifuer/pillars/blob/master/templates/error.jade).

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.version);


			//- Property
			section.property
				h3#property-htmlErrors: code
					| pillars.htmlErrors

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**Boolean**. True para que muestre información adicional del error en la página de error. False para que sólo muestre el código del error. **Por defecto**: true;

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.htmlErrors);


			//- Property
			section.property
				h3#property-maxUploadSize: code
					| pillars.maxUploadSize

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**Integer** que especifica el tamaño máximo de archivo permitido en el servidor. **Por defecto**: 10\*1024\*1024 (10MB)

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.maxUploadSize);
			

			//- Property
			section.property
				h3#property-maxGzipSize: code
					| pillars.maxGzipSize

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**Integer**. Tamaño máximo de un archivo para que sea comprimido por el servidor. **Por defecto**: 5\*1024\*1024 (5MB).

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.maxGzipSize);


			//- Property
			section.property
				h3#property-package: code 
					| pillars.package

				//- Property description
				section.description
					h4 Descripción
					:markdown
						La propiedad `package` es de solo lectura, devuelve el contenido de `package.json` en un objeto.  

				//- Property syntax
				section.syntax
					h4 Sintaxis
					code.codeblock.
						console.log(pillars.package);


			//- Property
			section.property
				h3#property-path: code 
					| pillars.path

				//- Property description
				section.description
					h4 Descripción
					:markdown
						La propiedad `path` es de sólo lectura. XXX

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.path);

			//- Property
			section.property
				h3#property-proxy: code
					| pillars.proxy

				//- Property description
				section.description
					h4 Descripción
					:markdown
						La propiedad `proxy` es de sólo lectura. Devuelve una instancia de la librería proxy de Node.js.

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.proxy);


			//- Property
			section.property
				h3#property-staticTemplate: code
					| pillars.staticTemplate

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**String** con la ruta relativa o absoluta del Template para static. **Por defecto**: ['templates/static.jade'](https://github.com/bifuer/pillars/blob/master/templates/static.jade).

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.staticTemplate);

			//- Property
			section.property
				h3#property-tempDirectory: code
					| pillars.tempDirectory

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**String** con la ruta relativa o absoluta del directorio para archivos temporales. **Por defecto**: Undefined.

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.staticTemplate);

			//- Property
			section.property
				h3#property-templatesCache: code
					| pillars.templatesCache

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**Boolean**. True para que cachee los templates, false para que no los cachee. **Por defecto**: true.

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.templatesCache);


			//- Property
			section.property
				h3#property-timeout: code
					| pillars.timeout

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**Integer**. Tiempo de espera máximo de cualquier solicitud HTTP en milisegundos. **Por defecto**: 10\*1000;

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.timeout);


			//- Property
			section.property
				h3#property-uploadsDirectory: code
					| pillars.uploadsDirectory

				//- Property description
				section.description
					h4 Descripción
					:markdown
						**String** que especifica la ruta relativa o absoluta del directorio donde se guardarán los ficheros subidos. **Por defecto**: undefined.

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.uploadsDirectory);

			//- Property
			section.property
				h3#property-version: code 
					| pillars.version

				//- Property description
				section.description
					h4 Descripción
					:markdown
						La propiedad `version` es de sólo lectura. Devuelve la versión del framework instalada.

					h4 Sintaxis
					code.codeblock.
						console.log(pillars.version);
	
			
		//- Methods ---------------------------------------------------------------------
		section.methods
			h2#methods Métodos

			//- Method
			section.method
				h3#method-global: code
					| pillars.global()

				//- Method description
				section.description
					h4 Descripción
					:markdown
						El método `.global()` configura como variables globales las clases más importantes del framework.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					code.codeblock.
						pillars.global();

			//- Method
			section.method
				h3#method-configure: code
					| pillars.configure()

				//- Method description
				section.description
					h4 Descripción
					:markdown
						El método `.configure()` nos proporciona una forma fácil y rápida de setear el funcionamiento del servidor.

				//- Method syntax
				section.syntax
					h4 Sintaxis
					code.codeblock.
						pillars.configure({
							htmlErrors: false,
							maxGzipSize: 100 * 1024;
							});

					section.parameters
						h5 Parámetros
						dl
							dt errorsTemplate
							dd
								:markdown
									**String** que especifica el Template para renderizar las páginas de error. **Por defecto**: ['templates/error.jade'](https://github.com/bifuer/pillars/blob/master/templates/error.jade).

							dt htmlErrors
							dd
								:markdown
									**Boolean**. True para que muestre información adicional del error en la página de error. False para que sólo muestre el código del error. **Por defecto**: true;

							dt maxUploadSize
							dd
								:markdown
									**Integer** que especifica el tamaño máximo de archivo permitido en el servidor. **Por defecto**: 10\*1024\*1024 (10MB)

							dt maxGzipSize
							dd
								:markdown
									**Integer**. Tamaño máximo de un archivo para que sea comprimido por el servidor. **Por defecto**: 5\*1024\*1024 (5MB).

							dt staticTemplate
							dd
								:markdown
									**String** con la ruta relativa o absoluta del Template para static. **Por defecto**: ['templates/static.jade'](https://github.com/bifuer/pillars/blob/master/templates/static.jade).

							dt tempDirectory
							dd
								:markdown
									**String** con la ruta relativa o absoluta del directorio para archivos temporales. **Por defecto**: Undefined.

							dt templatesCache
							dd
								:markdown
									**Boolean**. True para que cachee los templates, false para que no los cachee. **Por defecto**: true.

							dt timeout
							dd
								:markdown
									**Integer**. Tiempo de espera máximo de cualquier solicitud HTTP en milisegundos. **Por defecto**: 10\*1000;

							dt uploadsDirectory
							dd
								:markdown
									**String** que especifica la ruta relativa o absoluta del directorio donde se guardarán los ficheros subidos. **Por defecto**: undefined.




		//- Examples ------------------------------------------------------------------------------
		section.examples
			h2#examples Ejemplos

			//- Example
			section.example
				h3#example-1 Ejemplo 1
				:markdown
					Class `App` _Example 1_ lorem ipsum __synopsis__ hola [link to Google!](http://google.com)

				code.codeblock.
					var app = new App([{database:'',languages:['en'],port:3000,host:'*'}]);
				
				:markdown
					Class App Example 1 Review




				//- TEXTO PERTENECIENTE A ENV     


				`ENV` **configura** el funcionamiento del servidor HTTP, la base de datos, idiomas de la aplicación, datos del administrador, configuración smtp del servidor, templates y directorios de la aplicación. Por otra parte también **arranca el servidor HTTP**, **conecta a la base de datos**, añade a la aplicación **rutas y manejadores**, y **plugins**.

				Para configurar el servidor HTTP lo hacemos con la propiedad [`.server`](#property-server), que nos permite configurar opciones como puerto y host, entre otras. Si necesitamos configurar una base de datos lo haremos mediante [`.database`](#property-database), será necesaria la conexión a la base de datos si vamos a utilizar el Plugin de sesiones. Con la propiedad [`.smtp`](#property-smtp) se configura el servidor smtp, que utilizará el [Módulo Mailer](#) para el envío de correos y con la propiedad [`.languages`](#property-languages) definimos los idiomas en los que trabajará la aplicación. 

				> Al definir varios idiomas en la aplicación mediante `ENV.languages`, el primer idioma del array es el idioma predeterminado, y por lo tanto el idioma al que se traducirá la consola y mensajes del entorno. Además tendremos disponible, una vez arranquemos la aplicación, todas las subrutas para los diferentes idiomas: `http://midominio.com/es/`, `http://midominio.es/en/`, `http://midominio.com/de/`. Estando en la ruta raíz `http://midominio` el idioma por defecto que se definió. Consulta la [librería Textualization](#) para saber más.

				Otros parámetros que podremos configurar son los directorios que usará la aplicación, tanto el directorio de subida de archivos como el directorio de archivos temporales. Lo hacemos mediante [`.directories`](#property-directories). También se puede definir los templates que usará la aplicación o activar/desactivar el sistema de caché de los templates con [`.templates`](#property-templates) .

				> El motor por defecto de renderizado de Pillars.js es Jade. Podrás añadir otros motores de renderizado como Mustache.js gracias al [Módulo Renderer](#). 

				Finalmente también tenemos la posibilidad de configurar en `ENV` los datos del [administrador de la aplicación](#property-administrator), y activar o desactivar el [modo debug](#property-debug). 


				Para arrancar el servidor HTTP ejecutamos el método [`.start()`](#method-start), que tomará como valores los configurados en la propiedad `.server`, en otro caso, arrancará con los valores por defecto. Paramos el servicio con [`.stop()`](#method-stop). La conexión a una base de datos se realiza con [`.connect()`](#method-connect) y la desconexión con [`.disconnect()`](#method-disconnect) que igualmente se realizará con los datos configurados en la propiedad `.database`, en este caso sí es necesario configurar el nombre de la base de datos. 

				Respecto a las rutas que atenderá la aplicación y los manejadores, tenemos el conjunto de métodos de `ENV` que trabaja con la [Clase Route](#), que son [`.addRoute()`](#method-addRoute), [`.getRoute()`](#method-getRoute) y [`.removeRoute()`](#method-removeRoute). Estos métodos son para añadir un objeto route, recuperar un objeto route y eliminarlo de `ENV` respectivamente.

				Finalmente `ENV` cuenta con el conjunto de métodos para añadir, recuperar y eliminar instancias de la [Clase Plugin](#). 



