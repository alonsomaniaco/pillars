include ../.layout.jade

doctype html
html(lang=gw.language)
	- var path = [{label:'Pillars.js Tutorials',url:'/pillars/docs/tutorials/'},{label:'Cliente-Servidor',url:'/pillars/docs/tutorials/client-server.jade'}];
	+tutorial-layout("Pillars.js Tutorials - Envío de datos de Cliente a Servidor - 'make it easy!'",path)

		#title
			h1 GET, POST y Path
				em  Pillars.js Tutorials
		

		//- Summary
		section.summary
			h2#summary Sumario
			:markdown
				Las dos formas en las que se pueden enviar datos del cliente al servidor son: 

				+ Query String. *(El conocido GET)*
				+ Contenido de la solicitud. *(El conocido POST)*
				
				En el protocolo HTTP existen varios [métodos de petición](http://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M.C3.A9todos_de_petici.C3.B3n), en concreto 8, aunque usualmente se han usado en el desarrollo sólo GET y POST.

				Además, el framework permite el uso de rutas parametrizadas. 



		//- Examples
		section.example-01
			h2#examples Query String

			
			:markdown
				Query string es todo aquello que, desde el cliente, se ejecute después de la url con el formato: *interrogación*, *variable* *igual a valor*. Ejemplo: *?q=1*.
				
				Estos datos se recogen en el servidor mediante la [propiedad gw.query](../reference/gangway.jade#property-query).
				

			:highlight(lang='javascript')
				// Se visita http://localhost/?q=1
				//> query: { q: '1' }
				gw.send("Has enviado mediante Query String el valor: " + gw.query['q']);


		//- Examples
		section.example-02
			h2#examples Contenido de la solicitud

			:markdown
				Cuando se envía al servidor un formulario por el método POST, los datos llegan en gw.content.params. 

			:highlight(lang='javascript')
				gw.content.params

		//- Examples
		section.example-02
			h2#examples Rutas parametrizadas

			:markdown
				Cuando declaramos un objeto route, uno de los parámetros de la configuración es el path. Éste admite varias formas de configuración, que son las siguientes: 
				
				**1)** Ruta del Path a secas. *path:'pathestatico'*. Esta es la forma habitual en la que hemos declarado los path en los ejemplos.
				

				**2)** Una o varias variables definidas. *path:'/:var'* para una variable, o *path:'/:var1/:var2'* para varias variables.
			
			:highlight(lang='javascript')
				addRoute({path:'/:var'},function(gw){
					gw.send(gw.pathParams['var']);
				});
				// http://localhost/hola , devuelve 'hola'
				// http://localhost/users , devuelve 'users'

				addRoute({path:'/:var1/:var2'},function(gw){
					gw.send("var1: "+ gw.pathParams['var1']+", var2: "+gw.pathParams['var2'] );
				});
				// http://localhost/hola/maria , devuelve var1: hola, var2:maria
				// http://localhost/users/juan , devuelve var1: users, var2:juan,

				
			:markdown
				**3)** Variables sin definir en número. *path: '/*:var'*
				
			:highlight(lang='javascript')
				addRoute({path:'/*:var'},function(gw){
					gw.send(gw.pathParams['var']);
				});
				// http://localhost/hola , devuelve 'hola'
				// http://localhost/users/juan , devuelve 'users/juan'
				// http://localhost/users/juan/fotos , devuelve 'users/juan/fotos'

			:markdown
				Para finalizar, un ejemplo de combinación de las tres rutas parametrizadas en un mismo path: 

			:highlight(lang='javascript')
				addRoute({path:'/users/:user/:dir/*:resto'},function(gw){
					gw.send("user: "+ gw.pathParams['user']+", dir: "+gw.pathParams['dir']+
						", resto: "+gw.pathParams['resto']);
				});
				// http://localhost/users/juan/fotos/2014/album1 , 
				// devuelve 'user: juan, dir: fotos, resto: 2014/album1'
			


				



		

